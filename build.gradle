plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.matchday'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'


    //Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

    //WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    //Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //AWS S3
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.0'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('jacoco')
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    getClassDirectories().setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/enums', // enums package 내부는 제외
                        '**/config', // config package 내부는 제외
                ])
            })
    )
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('jacoco')
    }
    dependsOn test
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS' // 클래스 단위로 커버리지 검증 
            limit {
                counter = 'METHOD' // 메서드 단위로 커버리지 검증
                value = 'COVEREDRATIO' // 커버리지 비율
                minimum = 0 // 커버리지 비율 최소값 (만족 못하면 Test 통과 X)
            }
            limit {
                counter = 'BRANCH' // 분기를 기준으로 커버리 측정
                value = 'COVEREDRATIO' // 커버리지 비율
                minimum = 0 // 커버리지 비율 최소값 (만족 못하면 Test 통과 X)
            }
        }
    }
}
